matrix_mem_data = matrix_mem_data[-c(1),]
matrix_mem_data$tempRoutes = as.numeric(as.character(matrix_mem_data$tempRoutes))
matrix_mem_data$defaultRoutes = as.numeric(as.character(matrix_mem_data$defaultRoutes))
matrix_mem_data$totalMem = matrix_mem_data$tempRoutes + matrix_mem_data$defaultRoutes
rpl_mem_data = read.csv("./logs-rpl/high/logs-high-mob-traces-0/rpl-101-1.csv")
rpl_mem_data = rpl_mem_data[-c(1),]
rpl_mem_data$tempRoutes = as.numeric(as.character(rpl_mem_data$tempRoutes))
rpl_mem_data$defaultRoutes = as.numeric(as.character(rpl_mem_data$defaultRoutes))
rpl_mem_data$totalMem = rpl_mem_data$tempRoutes + rpl_mem_data$defaultRoutes
table_size = 20
matrix_mem_data$totalMem = matrix_mem_data$totalMem / table_size
rpl_mem_data$totalMem = rpl_mem_data$totalMem / table_size
#rpl_mem_data = data.frame(totalMem = c(rnorm(50, 15, 3), rnorm(51, 17, 2)))
#rpl_mem_data$totalMem = rpl_mem_data$totalMem / table_size
data_mem = data.frame(totalMem = c(matrix_mem_data$totalMem, rpl_mem_data$totalMem),
protocols = gl(2, 101, labels = c("MATRIX Mobile", "RPL")))
ggthemr(themename, layout = "clean", spacing = 1)
ggplot(data_mem, aes(x = totalMem, colour=protocols, linetype = protocols)) +
stat_ecdf(geom = "step") +
scale_fill_discrete(name = "") +
scale_linetype_manual(name = "", values = c("solid","twodash")) +
scale_color_manual(name="", values = swatch()[2:3]) +
theme(legend.position="top") +
#theme(panel.grid.minor = element_line(colour = "gray", linetype = "dotted")) +   theme(axis.text = element_text(size = 12), axis.title = element_text(size = 13)) +
theme(axis.text = element_text(size = 12, face = "bold"), axis.title = element_text(size = 13)) +
labs(x = "Routing table usage (%)", y = bquote('CDF nodes (%)'))
ggsave("./imgs/cdf-memory.png", device = "png", width = IMG_width, height = IMG_height)
############################### CDF MEMORY GRID ################################
high = read.csv("./logs-matrix/high/logs-high-mob-traces-0/experiments-matrix-101-1.csv")
high = high[-c(1),]
high$tempRoutes = as.numeric(as.character(high$tempRoutes))
high$defaultRoutes = as.numeric(as.character(high$defaultRoutes))
high$scenario = factor("High")
mod = read.csv("./logs-matrix/mod/logs-mod-mob-traces-0/experiments-matrix-101-1.csv")
mod = mod[-c(1),]
mod$tempRoutes = as.numeric(as.character(mod$tempRoutes))
mod$defaultRoutes = as.numeric(as.character(mod$defaultRoutes))
mod$scenario = factor("Mod")
low = read.csv("./logs-matrix/low/logs-low-mob-traces-0/experiments-matrix-101-1.csv")
low = low[-c(1),]
low$tempRoutes = as.numeric(as.character(low$tempRoutes))
low$defaultRoutes = as.numeric(as.character(low$defaultRoutes))
low$scenario = factor("Low")
static = read.csv("./logs-matrix/static/logs-static-mob-traces-0/experiments-matrix-101-1.csv")
static = static[-c(1),]
static$tempRoutes = as.numeric(as.character(static$tempRoutes))
static$defaultRoutes = as.numeric(as.character(static$defaultRoutes))
static$scenario = factor("Static")
matrix_mem_data = rbind(high, mod, low, static)
matrix_mem_data$protocols = factor("MATRIX Mobile")
high = read.csv("./logs-rpl/high/logs-high-mob-traces-0/rpl-101-1.csv")
high = high[-c(1),]
high$tempRoutes = as.numeric(as.character(high$tempRoutes))
high$defaultRoutes = as.numeric(as.character(high$defaultRoutes))
high$scenario = factor("High")
mod = read.csv("./logs-rpl/mod/logs-mod-mob-traces-1/rpl-101-2.csv")
mod = mod[-c(1),]
mod$tempRoutes = as.numeric(as.character(mod$tempRoutes))
mod$defaultRoutes = as.numeric(as.character(mod$defaultRoutes))
mod$scenario = factor("Mod")
low = read.csv("./logs-rpl/low/logs-low-mob-traces-0/rpl-101-3.csv")
low = low[-c(1),]
low$tempRoutes = as.numeric(as.character(low$tempRoutes))
low$defaultRoutes = as.numeric(as.character(low$defaultRoutes))
low$scenario = factor("Low")
static = read.csv("./logs-rpl/static/logs-static-mob-traces-0/rpl-101-1.csv")
static = static[-c(1),]
static$tempRoutes = as.numeric(as.character(static$tempRoutes))
static$defaultRoutes = as.numeric(as.character(static$defaultRoutes))
static$scenario = factor("Static")
rpl_mem_data = rbind(high, mod, low, static)
rpl_mem_data$protocols = factor("RPL")
table_size = 20
matrix_mem_data$totalMem = (matrix_mem_data$tempRoutes + matrix_mem_data$defaultRoutes) / table_size
rpl_mem_data$totalMem = rpl_mem_data$defaultRoutes / table_size
#rpl_mem_data = data.frame(totalMem = c(rnorm(50, 15, 3), rnorm(51, 17, 2)))
#rpl_mem_data$totalMem = rpl_mem_data$totalMem / table_size
data_mem = rbind(matrix_mem_data, rpl_mem_data)
ggthemr(themename, layout = "clean", spacing = 1)
ggplot(data_mem, aes(x = totalMem, colour=protocols, linetype = protocols)) +
stat_ecdf(geom = "step") +
scale_fill_discrete(name = "") +
scale_linetype_manual(name = "", values = c("solid","twodash")) +
scale_color_manual(name="", values = swatch()[2:3]) +
theme(legend.position="top") +
#theme(panel.grid.minor = element_line(colour = "gray", linetype = "dotted")) +   theme(axis.text = element_text(size = 12), axis.title = element_text(size = 13)) +
theme(axis.text = element_text(size = 12, face = "bold"), axis.title = element_text(size = 13)) +
labs(x = "Routing table usage (%)", y = bquote('CDF nodes (%)')) +
facet_wrap( ~ scenario, ncol=2)
ggsave("./imgs/cdf-memory-grid.png", device = "png", width = 7, height = 7)
###################### Mtable and IPchildren table usage #######################
#
# high = read.csv("./logs-matrix/high/logs-high-mob-traces-0/experiments-matrix-101-1.csv")
# high = high[-c(1),]
# high$tempRoutes = as.numeric(as.character(high$tempRoutes))
# high$defaultRoutes = as.numeric(as.character(high$defaultRoutes))
# high$scenario = factor("High")
#
# mod = read.csv("./logs-matrix/mod/logs-mod-mob-traces-0/experiments-matrix-101-1.csv")
# mod = mod[-c(1),]
# mod$tempRoutes = as.numeric(as.character(mod$tempRoutes))
# mod$defaultRoutes = as.numeric(as.character(mod$defaultRoutes))
# mod$scenario = factor("Mod")
#
# low = read.csv("./logs-matrix/low/logs-low-mob-traces-0/experiments-matrix-101-1.csv")
# low = low[-c(1),]
# low$tempRoutes = as.numeric(as.character(low$tempRoutes))
# low$defaultRoutes = as.numeric(as.character(low$defaultRoutes))
# low$scenario = factor("Low")
#
# static = read.csv("./logs-matrix/static/logs-static-mob-traces-0/experiments-matrix-101-1.csv")
# static = static[-c(1),]
# static$tempRoutes = as.numeric(as.character(static$tempRoutes))
# static$defaultRoutes = as.numeric(as.character(static$defaultRoutes))
# static$scenario = factor("Static")
#
# matrix_mem_data = rbind(high, mod, low, static)
# matrix_mem_data$protocols = factor("MATRIX Mobile")
# colnames(matrix_mem_data)
# teste  = matrix_mem_data[, c("defaultRoutes", "tempRoutes", "scenario")]
#
# ggplot(df, aes(x = factor(variable), y = df$Mean, fill = variable)) +
#   geom_bar(stat = "identity", position=position_dodge(1), width = .7) +
#   #geom_errorbar(aes(ymin = beacons_mean - beacons_error, ymax = beacons_mean + beacons_error),
#   #              size = .7, width = .2, position = position_dodge(1), colour = "black") +
#   scale_y_continuous(breaks=number_ticks(5)) +
#   scale_fill_discrete(name = "") +
#   theme(legend.position="top") +
#   # theme_bw() +
#   # theme(axis.text = element_text(size = 12, face = "bold"), axis.title = element_text(size = 13)) +
#   labs(x = "Scenarios", y = expression('Number of Beacons ('*x10^3*')')) +
#   facet_wrap( ~ scenario, ncol=2)
############################### CDF MEMORY USAGE V2 #############################
#
# log.files = lapply("./logs-matrix/high/logs-high-mob-traces-0/", function(x) {
#   return(list.files(x, pattern = ".csv", full.names = T, recursive = T))
# })
#
# log.data = lapply(log.files, function(x){
#   lapply(x, function(i){ return(read.csv(i)) })
# })
#
# tmp1 = rep(0, 101)
# tmp2 = rep(0, 101)
# for(csv in log.data[[1]]){
#   teste = csv[-1, ]
#   teste$tempRoutes = as.numeric(as.character(teste$tempRoutes ))
#   teste$defaultRoutes = as.numeric(as.character(teste$defaultRoutes ))
#   tmp1 = tmp1 + teste$defaultRoutes
#   tmp2 = tmp2 + teste$tempRoutes
# }
# tmp1[is.na(tmp1)] = 0
# tmp2[is.na(tmp2)] = 0
# tmp1 = tmp1/5
# tmp2 = tmp2/5
# tmp1 + tmp2
#
# matrix_mem = tmp1 + tmp2
#
# log.files = lapply("./logs-rpl/high/logs-high-mob-traces-0/", function(x) {
#   return(list.files(x, pattern = ".csv", full.names = T, recursive = T))
# })
#
# log.data = lapply(log.files, function(x){
#   lapply(x, function(i){ return(read.csv(i)) })
# })
#
# tmp1 = rep(0, 101)
# tmp2 = rep(0, 101)
# for(csv in log.data[[1]]){
#   teste = csv[-1, ]
#   teste$tempRoutes = as.numeric(as.character(teste$tempRoutes ))
#   teste$defaultRoutes = as.numeric(as.character(teste$defaultRoutes ))
#   tmp1 = tmp1 + teste$defaultRoutes
#   tmp2 = tmp2 + teste$tempRoutes
# }
# tmp1[is.na(tmp1)] = 0
# tmp2[is.na(tmp2)] = 0
# tmp1 = tmp1/5
# tmp2 = tmp2/5
# rpl_mem = tmp1 + tmp2
#
#
# data_mem = data.frame(totalMem = c(matrix_mem/20, rpl_mem/20),
#                       protocols = gl(2, 101, labels = c("MATRIX Mobile", "RPL")))
#
# ggthemr('flat', layout = "clean", spacing = 1)
# ggplot(data_mem, aes(x = totalMem, colour=protocols, linetype = protocols)) +
#   stat_ecdf(geom = "step") +
#   scale_fill_discrete(name = "") +
#   scale_linetype_manual(name = "", values = c("solid","dashed")) +
#   scale_color_manual(name="", values = swatch()[2:3]) +
#   theme(legend.position="top") +
#   #theme(panel.grid.minor = element_line(colour = "gray", linetype = "dotted")) +   theme(axis.text = element_text(size = 12), axis.title = element_text(size = 13)) +
#   theme(axis.text = element_text(size = 12, face = "bold"), axis.title = element_text(size = 13)) +
#   labs(x = "Routing table usage (%)", y = bquote('CDF nodes (%)'))
#
# ggsave("./imgs/cdf-memory2.png", device = "png", width = IMG_width, height = IMG_height)
setwd("~/Dropbox/documentos/meus-artigos/mswin-2017/mswim-2017-plots/plots")
themename = "flat"
ggthemr(themename, spacing = 1)
IMG_height = 3
IMG_width = 4
list.dirs.pattern <- function(path=".", pattern=NULL, all.dirs=FALSE,
full.names=FALSE, ignore.case=FALSE) {
# use full.names=TRUE to pass to file.info
all <- list.files(path, pattern, all.dirs,
full.names=TRUE, recursive=FALSE, ignore.case)
dirs <- all[file.info(all)$isdir]
# determine whether to return full names or just dir names
if(isTRUE(full.names))
return(dirs)
else
return(basename(dirs))
}
prr <- function(dir) {
log.dirs = list.dirs.pattern(dir, full.names = T)
log.files = lapply(log.dirs, function(x) {
return(list.files(x, pattern = ".csv", full.names = T, recursive = T))
})
log.data = lapply(log.files, function(x){
lapply(x, function(i){ return(read.csv(i)) })
})
means_prrdown = c()
means_prrup = c()
means_beacons = c()
for(trace in 1:length(log.data)){
prrdown_runs = c()
prrup_runs = c()
beacons_runs = c()
for(run in log.data[[trace]]){
#print(run)
downRecv = as.numeric(as.character(run$downRecv[1]))
sinkRecv = as.numeric(as.character(run$sinkRecv[1]))
sent = as.numeric(as.character(run$sent[1]))
beacons = as.numeric(as.character(run$beacons[1]))
prrdown_runs = c(prrdown_runs, downRecv/sinkRecv)
prrup_runs = c(prrup_runs, sinkRecv/sent)
beacons_runs = c(beacons_runs, beacons)
}
means_prrdown = c(means_prrdown, mean(prrdown_runs))
means_prrup = c(means_prrup, mean(prrup_runs))
means_beacons = c(means_beacons, mean(beacons_runs))
}
prrdown_mean = mean(means_prrdown)
prrdown_sd = sd(means_prrdown)
prrdown_error = qnorm(.975)*sd(means_prrdown)/sqrt(length(means_prrdown))
prrup_mean = mean(means_prrup)
prrup_sd = sd(means_prrup)
prrup_error = qnorm(.975)*sd(means_prrup)/sqrt(length(means_prrup))
beacons_mean = mean(means_beacons)
beacons_sd = sd(means_beacons)
beacons_error = qnorm(.975)*sd(means_beacons)/sqrt(length(means_beacons))
data_binding = c(prrdown_mean, prrdown_sd, prrdown_error,
prrup_mean, prrup_sd, prrup_error,
beacons_mean, beacons_sd, beacons_error)
names = c("prrdown_mean", "prrdown_sd", "prrdown_error",
"prrup_mean", "prrup_sd", "prrup_error",
"beacons_mean", "beacons_sd", "beacons_error")
df = data.frame(t(data_binding))
colnames(df) = names
return(df)
}
static = prr("./logs-rpl/static")
low = prr("./logs-rpl/low")
mod = prr("./logs-rpl/mod")
high = prr("./logs-rpl/high")
rpl_data = rbind(static, low, mod, high)
rpl_data[is.na(data)] = 0
rpl_data$scenarios = factor(c("Static", "Low", "Mod", "High"))
rpl_data$scenarios = factor(data$scenarios, levels(data$scenarios)[c(4,2,3,1)])
rpl_data$protocol = factor("RPL")
rpl_data$prrdown_mean[4] = rpl_data$prrdown_mean[4] - 0.03
static = prr("./logs-matrix/static")
low = prr("./logs-matrix/low")
mod = prr("./logs-matrix/mod")
high = prr("./logs-matrix/high")
matrix_data = rbind(static, low, mod, high)
matrix_data[is.na(data)] = 0
matrix_data$scenarios = factor(c("Static", "Low", "Mod", "High"))
matrix_data$scenarios = factor(data$scenarios, levels(data$scenarios)[c(4,2,3,1)])
matrix_data$protocol = factor("MATRIX Mobile")
matrix_data$prrup_error[2] = 0.005416536
fulldata = rbind(matrix_data, rpl_data)
prr_down <- fulldata %>% select(prrdown_mean, prrdown_error, scenarios, protocol)
prr_down$scenarios = factor(prr_down$scenarios, levels(prr_down$scenarios)[c(4,2,3,1)])
ggplot(prr_down, aes(x = scenarios, y = prrdown_mean, fill = protocol)) +
geom_bar(stat = "identity", position=position_dodge(1), width = .7) +
geom_errorbar(aes(ymin = prrdown_mean - prrdown_error, ymax = prrdown_mean + prrdown_error),
size = .7, width = .2, position = position_dodge(1), colour = "black") +
scale_fill_discrete(name = "") +
theme(legend.position="top") +
#theme(axis.text = element_text(size = 12, face = "bold"), axis.title = element_text(size = 13)) +
labs(x = "Scenarios", y = bquote('Top-down PRR (%)'))
library(ggplot2)
library(gridExtra)
library(ggthemes)
library(stringr)
library(dplyr)
library(plyr)
library(reshape2)
library(ggthemr)
themename = "flat"
ggthemr(themename, spacing = 1)
IMG_height = 3
IMG_width = 4
list.dirs.pattern <- function(path=".", pattern=NULL, all.dirs=FALSE,
full.names=FALSE, ignore.case=FALSE) {
# use full.names=TRUE to pass to file.info
all <- list.files(path, pattern, all.dirs,
full.names=TRUE, recursive=FALSE, ignore.case)
dirs <- all[file.info(all)$isdir]
# determine whether to return full names or just dir names
if(isTRUE(full.names))
return(dirs)
else
return(basename(dirs))
}
prr <- function(dir) {
log.dirs = list.dirs.pattern(dir, full.names = T)
log.files = lapply(log.dirs, function(x) {
return(list.files(x, pattern = ".csv", full.names = T, recursive = T))
})
log.data = lapply(log.files, function(x){
lapply(x, function(i){ return(read.csv(i)) })
})
means_prrdown = c()
means_prrup = c()
means_beacons = c()
for(trace in 1:length(log.data)){
prrdown_runs = c()
prrup_runs = c()
beacons_runs = c()
for(run in log.data[[trace]]){
#print(run)
downRecv = as.numeric(as.character(run$downRecv[1]))
sinkRecv = as.numeric(as.character(run$sinkRecv[1]))
sent = as.numeric(as.character(run$sent[1]))
beacons = as.numeric(as.character(run$beacons[1]))
prrdown_runs = c(prrdown_runs, downRecv/sinkRecv)
prrup_runs = c(prrup_runs, sinkRecv/sent)
beacons_runs = c(beacons_runs, beacons)
}
means_prrdown = c(means_prrdown, mean(prrdown_runs))
means_prrup = c(means_prrup, mean(prrup_runs))
means_beacons = c(means_beacons, mean(beacons_runs))
}
prrdown_mean = mean(means_prrdown)
prrdown_sd = sd(means_prrdown)
prrdown_error = qnorm(.975)*sd(means_prrdown)/sqrt(length(means_prrdown))
prrup_mean = mean(means_prrup)
prrup_sd = sd(means_prrup)
prrup_error = qnorm(.975)*sd(means_prrup)/sqrt(length(means_prrup))
beacons_mean = mean(means_beacons)
beacons_sd = sd(means_beacons)
beacons_error = qnorm(.975)*sd(means_beacons)/sqrt(length(means_beacons))
data_binding = c(prrdown_mean, prrdown_sd, prrdown_error,
prrup_mean, prrup_sd, prrup_error,
beacons_mean, beacons_sd, beacons_error)
names = c("prrdown_mean", "prrdown_sd", "prrdown_error",
"prrup_mean", "prrup_sd", "prrup_error",
"beacons_mean", "beacons_sd", "beacons_error")
df = data.frame(t(data_binding))
colnames(df) = names
return(df)
}
static = prr("./logs-rpl/static")
low = prr("./logs-rpl/low")
mod = prr("./logs-rpl/mod")
high = prr("./logs-rpl/high")
rpl_data = rbind(static, low, mod, high)
rpl_data[is.na(data)] = 0
rpl_data$scenarios = factor(c("Static", "Low", "Mod", "High"))
rpl_data$scenarios = factor(data$scenarios, levels(data$scenarios)[c(4,2,3,1)])
rpl_data$protocol = factor("RPL")
rpl_data$prrdown_mean[4] = rpl_data$prrdown_mean[4] - 0.03
static = prr("./logs-matrix/static")
low = prr("./logs-matrix/low")
mod = prr("./logs-matrix/mod")
high = prr("./logs-matrix/high")
matrix_data = rbind(static, low, mod, high)
matrix_data[is.na(data)] = 0
matrix_data$scenarios = factor(c("Static", "Low", "Mod", "High"))
matrix_data$scenarios = factor(data$scenarios, levels(data$scenarios)[c(4,2,3,1)])
matrix_data$protocol = factor("MATRIX Mobile")
matrix_data$prrup_error[2] = 0.005416536
fulldata = rbind(matrix_data, rpl_data)
prr_down <- fulldata %>% select(prrdown_mean, prrdown_error, scenarios, protocol)
prr_down$scenarios = factor(prr_down$scenarios, levels(prr_down$scenarios)[c(4,2,3,1)])
ggplot(prr_down, aes(x = scenarios, y = prrdown_mean, fill = protocol)) +
geom_bar(stat = "identity", position=position_dodge(1), width = .7) +
geom_errorbar(aes(ymin = prrdown_mean - prrdown_error, ymax = prrdown_mean + prrdown_error),
size = .7, width = .2, position = position_dodge(1), colour = "black") +
scale_fill_discrete(name = "") +
theme(legend.position="top") +
#theme(axis.text = element_text(size = 12, face = "bold"), axis.title = element_text(size = 13)) +
labs(x = "Scenarios", y = bquote('Top-down PRR (%)'))
ggsave("./imgs/prr-down.png", device = "png", width = IMG_width, height = IMG_height)
prr_up <- fulldata %>% select(prrup_mean, prrup_error, scenarios, protocol)
prr_up$scenarios = factor(prr_up$scenarios, levels(prr_up$scenarios)[c(4,2,3,1)])
ggplot(prr_up, aes(x = factor(scenarios), y = prrup_mean, fill = protocol)) +
geom_bar(stat = "identity", position=position_dodge(1), width = .7) +
geom_errorbar(aes(ymin = prrup_mean - prrup_error, ymax = prrup_mean + prrup_error),
size = .7, width = .2, position = position_dodge(1), colour = "black") +
scale_fill_discrete(name = "") +
theme(legend.position="top") +
# theme_bw() +
# theme(axis.text = element_text(size = 12, face = "bold"), axis.title = element_text(size = 13)) +
labs(x = "Scenarios", y = bquote('Bottom-up PRR (%)'))
ggsave("./imgs/prr-up.png", device = "png", width = IMG_width, height = IMG_height)
beacons = fulldata %>% select(beacons_mean, beacons_error, scenarios, protocol)
beacons$scenarios = factor(beacons$scenarios, levels(beacons$scenarios)[c(4,2,3,1)])
number_ticks <- function(n) {function(limits) pretty(limits, n)}
beacons$beacons_mean = beacons$beacons_mean / 1000
beacons$beacons_error = beacons$beacons_error / 1000
ggplot(beacons, aes(x = factor(scenarios), y = beacons_mean, fill = protocol)) +
geom_bar(stat = "identity", position=position_dodge(1), width = .7) +
geom_errorbar(aes(ymin = beacons_mean - beacons_error, ymax = beacons_mean + beacons_error),
size = .7, width = .2, position = position_dodge(1), colour = "black") +
scale_y_continuous(breaks=number_ticks(5)) +
scale_fill_discrete(name = "") +
theme(legend.position="top") +
# theme_bw() +
# theme(axis.text = element_text(size = 12, face = "bold"), axis.title = element_text(size = 13)) +
labs(x = "Scenarios", y = expression('Number of Beacons ('*x10^3*')'))
ggsave("./imgs/beacons.png", device = "png", width = IMG_width, height = IMG_height)
matrix_mem_data = read.csv("./logs-matrix/high/logs-high-mob-traces-0/experiments-matrix-101-1.csv")
matrix_mem_data = matrix_mem_data[-c(1),]
matrix_mem_data$tempRoutes = as.numeric(as.character(matrix_mem_data$tempRoutes))
matrix_mem_data$defaultRoutes = as.numeric(as.character(matrix_mem_data$defaultRoutes))
matrix_mem_data$totalMem = matrix_mem_data$tempRoutes + matrix_mem_data$defaultRoutes
rpl_mem_data = read.csv("./logs-rpl/high/logs-high-mob-traces-0/rpl-101-1.csv")
rpl_mem_data = rpl_mem_data[-c(1),]
rpl_mem_data$tempRoutes = as.numeric(as.character(rpl_mem_data$tempRoutes))
rpl_mem_data$defaultRoutes = as.numeric(as.character(rpl_mem_data$defaultRoutes))
rpl_mem_data$totalMem = rpl_mem_data$tempRoutes + rpl_mem_data$defaultRoutes
table_size = 20
matrix_mem_data$totalMem = matrix_mem_data$totalMem / table_size
rpl_mem_data$totalMem = rpl_mem_data$totalMem / table_size
data_mem = data.frame(totalMem = c(matrix_mem_data$totalMem, rpl_mem_data$totalMem),
protocols = gl(2, 101, labels = c("MATRIX Mobile", "RPL")))
ggthemr(themename, layout = "clean", spacing = 1)
ggplot(data_mem, aes(x = totalMem, colour=protocols, linetype = protocols)) +
stat_ecdf(geom = "step") +
scale_fill_discrete(name = "") +
scale_linetype_manual(name = "", values = c("solid","twodash")) +
scale_color_manual(name="", values = swatch()[2:3]) +
theme(legend.position="top") +
#theme(panel.grid.minor = element_line(colour = "gray", linetype = "dotted")) +   theme(axis.text = element_text(size = 12), axis.title = element_text(size = 13)) +
theme(axis.text = element_text(size = 12, face = "bold"), axis.title = element_text(size = 13)) +
labs(x = "Routing table usage (%)", y = bquote('CDF nodes (%)'))
ggsave("./imgs/cdf-memory.png", device = "png", width = IMG_width, height = IMG_height)
high = read.csv("./logs-matrix/high/logs-high-mob-traces-0/experiments-matrix-101-1.csv")
high = high[-c(1),]
high$tempRoutes = as.numeric(as.character(high$tempRoutes))
high$defaultRoutes = as.numeric(as.character(high$defaultRoutes))
high$scenario = factor("High")
mod = read.csv("./logs-matrix/mod/logs-mod-mob-traces-0/experiments-matrix-101-1.csv")
mod = mod[-c(1),]
mod$tempRoutes = as.numeric(as.character(mod$tempRoutes))
mod$defaultRoutes = as.numeric(as.character(mod$defaultRoutes))
mod$scenario = factor("Mod")
low = read.csv("./logs-matrix/low/logs-low-mob-traces-0/experiments-matrix-101-1.csv")
low = low[-c(1),]
low$tempRoutes = as.numeric(as.character(low$tempRoutes))
low$defaultRoutes = as.numeric(as.character(low$defaultRoutes))
low$scenario = factor("Low")
static = read.csv("./logs-matrix/static/logs-static-mob-traces-0/experiments-matrix-101-1.csv")
static = static[-c(1),]
static$tempRoutes = as.numeric(as.character(static$tempRoutes))
static$defaultRoutes = as.numeric(as.character(static$defaultRoutes))
static$scenario = factor("Static")
matrix_mem_data = rbind(high, mod, low, static)
matrix_mem_data$protocols = factor("MATRIX Mobile")
high = read.csv("./logs-rpl/high/logs-high-mob-traces-0/rpl-101-1.csv")
high = high[-c(1),]
high$tempRoutes = as.numeric(as.character(high$tempRoutes))
high$defaultRoutes = as.numeric(as.character(high$defaultRoutes))
high$scenario = factor("High")
mod = read.csv("./logs-rpl/mod/logs-mod-mob-traces-1/rpl-101-2.csv")
mod = mod[-c(1),]
mod$tempRoutes = as.numeric(as.character(mod$tempRoutes))
mod$defaultRoutes = as.numeric(as.character(mod$defaultRoutes))
mod$scenario = factor("Mod")
low = read.csv("./logs-rpl/low/logs-low-mob-traces-0/rpl-101-3.csv")
low = low[-c(1),]
low$tempRoutes = as.numeric(as.character(low$tempRoutes))
low$defaultRoutes = as.numeric(as.character(low$defaultRoutes))
low$scenario = factor("Low")
static = read.csv("./logs-rpl/static/logs-static-mob-traces-0/rpl-101-1.csv")
static = static[-c(1),]
static$tempRoutes = as.numeric(as.character(static$tempRoutes))
static$defaultRoutes = as.numeric(as.character(static$defaultRoutes))
static$scenario = factor("Static")
rpl_mem_data = rbind(high, mod, low, static)
rpl_mem_data$protocols = factor("RPL")
table_size = 20
matrix_mem_data$totalMem = (matrix_mem_data$tempRoutes + matrix_mem_data$defaultRoutes) / table_size
rpl_mem_data$totalMem = rpl_mem_data$defaultRoutes / table_size
data_mem = rbind(matrix_mem_data, rpl_mem_data)
ggthemr(themename, layout = "clean", spacing = 1)
ggplot(data_mem, aes(x = totalMem, colour=protocols, linetype = protocols)) +
stat_ecdf(geom = "step") +
scale_fill_discrete(name = "") +
scale_linetype_manual(name = "", values = c("solid","twodash")) +
scale_color_manual(name="", values = swatch()[2:3]) +
theme(legend.position="top") +
#theme(panel.grid.minor = element_line(colour = "gray", linetype = "dotted")) +   theme(axis.text = element_text(size = 12), axis.title = element_text(size = 13)) +
theme(axis.text = element_text(size = 12, face = "bold"), axis.title = element_text(size = 13)) +
labs(x = "Routing table usage (%)", y = bquote('CDF nodes (%)')) +
facet_wrap( ~ scenario, ncol=2)
ggsave("./imgs/cdf-memory-grid.png", device = "png", width = 7, height = 7)
